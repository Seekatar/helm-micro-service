NAME: chart-0000000000
LAST DEPLOYED: NEVER
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: test-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: $env:APPNAME
data:
  VERSION: "$env:IMAGE_TAG"
  VUE_APP_API_PATH: "$env:VUE_APP_API_PATH"
  VUE_APP_CODEGEN: "$env:VUE_APP_CODEGEN"
  VUE_APP_ENV_FILE: ".env"
  VUE_APP_OKTA_CLIENT_ID: "$env:OKTAGROUP__CLIENT_ID"
  VUE_APP_OKTA_ISSUER: "$env:OKTAGROUP__ISSUER"
  VUE_APP_OKTA_TESTING_DISABLEHTTPSCHEC: "$env:VUE_APP_OKTA_TESTING_DISABLEHTTPSCHEC"
  VUE_APP_OKTA_USE_PKCE: "$env:VUE_APP_OKTA_USE_PKCE"
  VUE_APP_PATH: "$env:VUE_APP_PATH"
  VUE_APP_PORT: "$env:NODE_PORT"
  VUE_APP_REDIRECT_PORT: "$env:VUE_APP_REDIRECT_PORT"
  VUE_APP_URL: "$env:VUE_APP_URL"
---
# Source: test-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: $env:APPNAME
  labels:
    helm.sh/chart: test-service-0.1.0
    app.kubernetes.io/name: $env:APPNAME
    app.kubernetes.io/instance: chart-0000000000
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8008
      protocol: TCP
      name: healthcheck

  selector:
    app.kubernetes.io/name: $env:APPNAME
    app.kubernetes.io/instance: chart-0000000000
---
# Source: test-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $env:APPNAME
  labels:
    helm.sh/chart: test-service-0.1.0
    app.kubernetes.io/name: $env:APPNAME
    app.kubernetes.io/instance: chart-0000000000
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $env:APPNAME
      app.kubernetes.io/instance: chart-0000000000
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $env:APPNAME
        app.kubernetes.io/instance: chart-0000000000
      annotations:
        checksum/config: ef06a79f1291efdd9a8da940609929467d155e64b6a71080d76a6a6ab960e6e2
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        co.elastic.logs/json.keys_under_root: "true"
        co.elastic.logs/json.add_error_key: "true"
        co.elastic.logs/json.message_key: "log"
    spec:
      securityContext:
        {}
      imagePullSecrets:
        - name: regcred

      containers:
        - name: $env:APPNAME
          securityContext:
            {}
          image: "test.azurecr.io/test.test.ui:$env:IMAGE_TAG"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
          envFrom:
            - configMapRef:
                name: $env:APPNAME
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8008
            initialDelaySeconds: 10
            timeoutSeconds: 15
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8008
            initialDelaySeconds: 45
            timeoutSeconds: 120
            periodSeconds: 120
          resources:
            requests:
              cpu: 300m
              memory: 500Mi
---
# Source: test-service/templates/ingressInternal.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test--ui-internal
  labels:
    helm.sh/chart: test-service-0.1.0
    app.kubernetes.io/name: $env:APPNAME
    app.kubernetes.io/instance: chart-0000000000
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: internal
    nginx.ingress.kubernetes.io/client-body-buffer-size: 128k
    nginx.ingress.kubernetes.io/proxy-body-size: 10m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "360"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: "$env:INGRESS_HOST_INTERNAL"
      http:
        paths:
          - path: /fp-ui
            backend:
              serviceName: $env:APPNAME
              servicePort: 80
---
# Source: test-service/templates/ingressInternet.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: test--ui-internet
  labels:
    helm.sh/chart: test-service-0.1.0
    app.kubernetes.io/name: $env:APPNAME
    app.kubernetes.io/instance: chart-0000000000
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: internet
    nginx.ingress.kubernetes.io/client-body-buffer-size: 128k
    nginx.ingress.kubernetes.io/proxy-body-size: 10m
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "360"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: "$env:INGRESS_HOST_INTERNET"
      http:
        paths:
          - path: /fp-ui
            backend:
              serviceName: $env:APPNAME
              servicePort: 80

NOTES:
Check the ingress and service configuration to get the port
